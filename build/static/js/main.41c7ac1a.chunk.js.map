{"version":3,"sources":["components/tile/Tile.js","components/board/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Tile","props","id","x","y","className","playerPosition","pointPosition","Board","state","title","size","score","currentDirection","inGame","gameOver","timerId","componentDidMount","window","addEventListener","keyEvent","componentWillUnmount","removeEventListener","clearInterval","setState","startGame","Math","floor","random","startMoving","setInterval","console","log","moveRight","moveLeft","moveUp","moveDown","checkCollision","checkPoint","currentPosition","alert","event","keyCode","tileBoard","i","this","j","push","onClick","e","disabled","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41c7ac1a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Tile = (props) => {\r\n    const { x, y } = props.id;\r\n\r\n    return <div className={`tile ${props.playerPosition && \"player-position\"} ${props.pointPosition && \"point-position\"}`}>\r\n        {`${x}/${y}`}\r\n    </div>;\r\n};\r\n\r\nexport default Tile;\r\n","import React from \"react\";\r\nimport './Board.css';\r\n\r\nimport Tile from '../tile/Tile'\r\n\r\nclass Board extends React.Component {\r\n\r\n\t// --- React Steate\r\n\tstate = {\r\n\t\ttitle: \"React Simple Game\",\r\n\t\tsize: {\r\n\t\t\tx: 10,\r\n\t\t\ty: 10\r\n\t\t},\r\n\t\tscore: 0,\r\n\t\tplayerPosition: [1, 1],\r\n\t\tpointPosition: [0, 0],\r\n\t\tcurrentDirection: null,\r\n\t\tinGame: false,\r\n\t\tgameOver: false,\r\n\t\ttimerId: null\r\n\t}\r\n\r\n\t// --- React cycle life methods\r\n\tcomponentDidMount = () => {\r\n\t\twindow.addEventListener('keydown', this.keyEvent)\r\n\t}\r\n\r\n\tcomponentWillUnmount = () => {\r\n\t\twindow.removeEventListener('keydown', this.keyEvent)\r\n\t\tclearInterval(this.state.timerId);\r\n\t\tthis.setState({ timerId: null });\r\n\t}\r\n\r\n\t// --- Start game\r\n\tstartGame = () => {\r\n\t\tthis.setState({\r\n\t\t\tinGame: true,\r\n\t\t\tgameOver: false,\r\n\t\t\tscore: 0,\r\n\t\t\tplayerPosition: [1, 1],\r\n\t\t\tpointPosition: [Math.floor(Math.random() * 10) + 1, Math.floor(Math.random() * 10) + 1],\r\n\t\t\tcurrentDirection: null,\r\n\t\t});\r\n\r\n\t\t// By default, start to the right\r\n\t\tthis.startMoving();\r\n\t}\r\n\r\n\t// --- Move player\r\n\tstartMoving = () => {\r\n\t\tthis.setState({\r\n\t\t\ttimerId: setInterval(() => {\r\n\t\t\t\tconsole.log('Counting by 500ms');\r\n\r\n\t\t\t\tswitch (this.state.currentDirection) {\r\n\t\t\t\t\tcase \"right\":\r\n\t\t\t\t\t\tthis.moveRight();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"left\":\r\n\t\t\t\t\t\tthis.moveLeft();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"up\":\r\n\t\t\t\t\t\tthis.moveUp();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"down\":\r\n\t\t\t\t\t\tthis.moveDown();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthis.moveRight();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.checkCollision();\r\n\t\t\t\tthis.checkPoint();\r\n\t\t\t}, 500)\r\n\t\t});\r\n\t}\r\n\r\n\tmoveRight = () => {\r\n\t\tconst currentPosition = this.state.playerPosition;\r\n\t\t++currentPosition[1];\r\n\r\n\t\tthis.setState({ playerPosition: currentPosition });\r\n\t}\r\n\r\n\tmoveLeft = () => {\r\n\t\tconst currentPosition = this.state.playerPosition;\r\n\t\t--currentPosition[1];\r\n\r\n\t\tthis.setState({ playerPosition: currentPosition });\r\n\t}\r\n\r\n\tmoveUp = () => {\r\n\t\tconst currentPosition = this.state.playerPosition;\r\n\t\t--currentPosition[0];\r\n\r\n\t\tthis.setState({ playerPosition: currentPosition });\r\n\t}\r\n\r\n\tmoveDown = () => {\r\n\t\tconst currentPosition = this.state.playerPosition;\r\n\t\t++currentPosition[0];\r\n\r\n\t\tthis.setState({ playerPosition: currentPosition });\r\n\t}\r\n\r\n\t// --- Game mechanism\r\n\tcheckPoint = () => {\r\n\t\tconst { playerPosition, pointPosition, score } = this.state;\r\n\t\tif (playerPosition[0] === pointPosition[0] && playerPosition[1] === pointPosition[1]) {\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\tscore: score + 1,\r\n\t\t\t\tpointPosition: [Math.floor(Math.random() * 10) + 1, Math.floor(Math.random() * 10) + 1]\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tcheckCollision = () => {\r\n\t\tconst { playerPosition, size } = this.state;\r\n\t\tif (playerPosition[0] > size.x || playerPosition[0] < 1 || playerPosition[1] > size.y || playerPosition[1] < 1) {\r\n\r\n\t\t\tclearInterval(this.state.timerId);\r\n\t\t\tthis.setState({\r\n\t\t\t\tgameOver: true,\r\n\t\t\t\tinGame: false,\r\n\t\t\t\ttimerId: null\r\n\t\t\t});\r\n\r\n\t\t\talert(`GAME OVER. YOUR SCORE: ${this.state.score}`);\r\n\t\t}\r\n\t}\r\n\r\n\t// --- keyboard controller\r\n\tkeyEvent = (event) => {\r\n\r\n\t\t/** \r\n\t\t * 87 -> w, 83 -> s, 65 -> a, 68 -> d\r\n\t\t * 38 -> up, 40 -> down, 37 -> left, 39 -> right\r\n\t\t */\r\n\r\n\t\tif (event.keyCode === 87 | event.keyCode === 38) {\r\n\t\t\tthis.setState({ currentDirection: \"up\" });\r\n\t\t} else if (event.keyCode === 83 | event.keyCode === 40) {\r\n\t\t\tthis.setState({ currentDirection: \"down\" });\r\n\t\t} else if (event.keyCode === 65 | event.keyCode === 37) {\r\n\t\t\tthis.setState({ currentDirection: \"left\" });\r\n\t\t} else if (event.keyCode === 68 | event.keyCode === 39) {\r\n\t\t\tthis.setState({ currentDirection: \"right\" });\r\n\t\t}\r\n\t}\r\n\r\n\t// --- RENDER -----\r\n\trender() {\r\n\t\tconst tileBoard = [];\r\n\r\n\t\tfor (let i = 1; i <= this.state.size.x; i++) {\r\n\t\t\tfor (let j = 1; j <= this.state.size.y; j++) {\r\n\t\t\t\ttileBoard.push(<Tile\r\n\t\t\t\t\tid={{ x: i, y: j }}\r\n\t\t\t\t\tkey={`${i}/${j}`}\r\n\t\t\t\t\tplayerPosition={this.state.playerPosition[0] === i && this.state.playerPosition[1] === j}\r\n\t\t\t\t\tpointPosition={this.state.pointPosition[0] === i && this.state.pointPosition[1] === j}\r\n\t\t\t\t/>);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<main className=\"board-wrapper\">\r\n\t\t\t\t<header className=\"header-wrapper\">{this.state.title}</header>\r\n\t\t\t\t<section className=\"score-wrapper\">SCORE: {this.state.score}</section>\r\n\t\t\t\t<section className=\"tile-board-wrapper\">{tileBoard}</section>\r\n\t\t\t\t<section className=\"button-wrapper\">\r\n\t\t\t\t\t<button onClick={e => this.startGame()} disabled={this.state.inGame}>Play Again</button>\r\n\t\t\t\t</section>\r\n\t\t\t</main>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Board;\r\n","import \"./App.css\";\r\n\r\nimport Board from './components/board/Board';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<Board />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}